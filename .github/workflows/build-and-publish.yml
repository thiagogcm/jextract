name: Build and Publish jextract

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build_and_publish_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin' # Using Temurin as a widely available distribution

      - name: Install LLVM and Clang
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm clang libclang-dev llvm-dev # ensure llvm-dev for llvm-config
          # Attempt to dynamically find LLVM_HOME
          LLVM_CONFIG_PATH=$(which llvm-config || true)
          if [ -f "$LLVM_CONFIG_PATH" ]; then
            LLVM_PREFIX=$(llvm-config --prefix)
            echo "Found LLVM prefix: $LLVM_PREFIX"
            # Check if the found prefix contains include/clang and lib/clang
            # This check might be too restrictive if llvm-config --prefix returns e.g. /usr
            # The build.gradle script looks for specific paths relative to LLVM_HOME like lib/clang and include/clang
            # If LLVM_PREFIX is /usr, then it expects /usr/lib/clang and /usr/include/clang
            # If LLVM_PREFIX is /usr/lib/llvm-18, it expects /usr/lib/llvm-18/lib/clang etc.
            # So, setting LLVM_HOME = LLVM_PREFIX should be generally correct.
            # The build script will construct the full paths.
            echo "LLVM_HOME=${LLVM_PREFIX}" | tee -a $GITHUB_ENV
            echo "Set LLVM_HOME to $LLVM_PREFIX"

            # As a verification, check if common subdirectories exist to warn if the layout is unexpected.
            # This is for logging/debugging, not for changing LLVM_HOME again.
            if [ -d "$LLVM_PREFIX/lib/clang" ] && [ -d "$LLVM_PREFIX/include/clang" ]; then
              echo "Standard LLVM layout (lib/clang, include/clang) found under $LLVM_PREFIX."
            elif [ -d "$LLVM_PREFIX/lib/llvm-18/lib/clang" ]; then # Example for a versioned subdirectory, adjust version as needed or make generic
                echo "Versioned LLVM layout found under $LLVM_PREFIX."
            else
                echo "Warning: Standard LLVM subdirectories (lib/clang, include/clang) not directly under $LLVM_PREFIX."
                echo "build.gradle will try to find necessary components relative to $LLVM_PREFIX."
            fi

          else
            echo "llvm-config not found after installing llvm-dev. Trying to find LLVM in common paths."
            # Fallback: Try to find the latest version in /usr/lib/llvm-*
            # This regex extracts the version number from a path like /usr/lib/llvm-XY/lib/clang/someversion/include
            FOUND_LLVM_DIR=$(ls -d /usr/lib/llvm-*/lib/clang/*/include 2>/dev/null | sort -V | tail -n 1 | sed -E 's|(/usr/lib/llvm-[0-9]+)/lib/clang/.*|\1|')
            if [ -n "$FOUND_LLVM_DIR" ] && [ -d "$FOUND_LLVM_DIR" ]; then
              echo "LLVM_HOME=${FOUND_LLVM_DIR}" | tee -a $GITHUB_ENV
              echo "Using fallback LLVM_HOME=${FOUND_LLVM_DIR}"
            else
              echo "::error::Could not automatically determine LLVM_HOME via llvm-config or fallback. Please check LLVM installation."
              exit 1
            fi
          fi
          clang --version
          echo "Clang installed in: $(which clang)"
          echo "LLVM_HOME is $LLVM_HOME"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper # Use the wrapper defined in the project

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build jextract with Gradle
        run: |
          echo "JAVA_HOME is $JAVA_HOME"
          echo "LLVM_HOME is $LLVM_HOME"
          # Ensure gradlew is executable
          chmod +x ./gradlew
          ./gradlew createJextractImage -Pjdk_home="$JAVA_HOME" -Pllvm_home="$LLVM_HOME"

      - name: Package jextract artifact
        run: |
          ARTIFACT_NAME="jextract-linux-amd64"
          # Ensure the build directory and jextract output exist
          if [ -d "build/jextract" ]; then
            tar -czvf "${ARTIFACT_NAME}.tar.gz" -C build/jextract .
            echo "ARTIFACT_PATH=${ARTIFACT_NAME}.tar.gz" | tee -a $GITHUB_ENV
            echo "Packaged artifact: ${ARTIFACT_NAME}.tar.gz"
          else
            echo "::error::Build output directory 'build/jextract' not found."
            exit 1
          fi

      - name: Upload build artifact (on push to main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: jextract-linux-amd64
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 7 # Optional: Adjust retention period as needed

      - name: Publish release asset (on new release)
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1 # Using v1 as it's stable; check for newer versions if appropriate
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_PATH }} # This will be jextract-linux-amd64.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
