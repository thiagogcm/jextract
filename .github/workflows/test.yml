name: Build and test Jextract

on:
  push:
    branches: [ main ] # Assuming 'main' is the default branch
  release:
    types: [ published ]
  workflow_dispatch: # Keep workflow_dispatch

jobs:
  validate-gradle-wrapper:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 1
      - uses: gradle/actions/wrapper-validation@v4

  build-and-publish-linux-artifact:
    runs-on: ubuntu-latest # Set runs-on
    steps:
    - name: 'Check out repository'
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 1

    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'

    - name: 'Check default Java version'
      shell: sh
      run: |
        java --version
        echo JAVA_HOME=$JAVA_HOME

    # Removed 'Check cache for LLVM'
    # Removed 'Download and extract LLVM'
    # Removed 'Create trimmed-down libclang image (for faster caching)'

    - name: Install LLVM and Clang
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm clang libclang-dev llvm-dev
        LLVM_CONFIG_PATH=$(which llvm-config || true)
        if [ -f "$LLVM_CONFIG_PATH" ]; then
          LLVM_PREFIX=$(llvm-config --prefix)
          echo "LLVM_HOME=${LLVM_PREFIX}" | tee -a $GITHUB_ENV
          echo "Set LLVM_HOME to $LLVM_PREFIX"
        else
          # Fallback to find latest version, similar to previous attempt
          FOUND_LLVM_DIR=$(ls -d /usr/lib/llvm-*/lib/clang/*/include 2>/dev/null | sort -V | tail -n 1 | sed -E 's|(/usr/lib/llvm-[0-9]+)/lib/clang/.*|\1|')
          if [ -n "$FOUND_LLVM_DIR" ] && [ -d "$FOUND_LLVM_DIR" ]; then
             echo "LLVM_HOME=${FOUND_LLVM_DIR}" | tee -a $GITHUB_ENV
             echo "Using fallback LLVM_HOME=${FOUND_LLVM_DIR}"
          else
             echo "::error::Could not automatically determine LLVM_HOME. Please check LLVM installation."
             exit 1
          fi
        fi
        clang --version
        echo "Clang installed in: $(which clang)"
        echo "LLVM_HOME is $LLVM_HOME"

    - name: Set up Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: wrapper # Or a specific version

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build jextract artifact image
      run: |
        chmod +x ./gradlew
        ./gradlew createJextractImage -Pjdk_home="$JAVA_HOME" -Pllvm_home="$LLVM_HOME"

    - name: Package jextract artifact
      run: |
        ARTIFACT_NAME="jextract-linux-amd64"
        # Ensure the build directory and jextract output exist
        if [ -d "build/jextract" ]; then
          tar -czvf "${ARTIFACT_NAME}.tar.gz" -C build/jextract .
          echo "ARTIFACT_PATH=${ARTIFACT_NAME}.tar.gz" | tee -a $GITHUB_ENV
          echo "Packaged artifact: ${ARTIFACT_NAME}.tar.gz"
        else
          echo "::error::Build output directory 'build/jextract' not found."
          exit 1
        fi

    - name: Upload build artifact (on push to main)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: jextract-linux-amd64
        path: ${{ env.ARTIFACT_PATH }}
        retention-days: 7 # Optional: Adjust retention period

    - name: Publish release asset (on new release)
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.ARTIFACT_PATH }}
        asset_name: ${{ env.ARTIFACT_PATH }} # This will be jextract-linux-amd64.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

